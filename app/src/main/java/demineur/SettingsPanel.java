/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package demineur;

import java.awt.GraphicsEnvironment;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dimitriseaborn
 */
public class SettingsPanel extends javax.swing.JPanel {

    /**
     * Creates new form SettingsPanel
     */
    public SettingsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        titlePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buttonsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        gamemodeLabel = new javax.swing.JLabel();
        gamemodeSelector = new javax.swing.JComboBox<>();
        displayLabel = new javax.swing.JLabel();
        displayButton = new javax.swing.JButton();
        dificultyLabel = new javax.swing.JLabel();
        dificultySelector = new javax.swing.JComboBox<>();
        sizeLabel = new javax.swing.JLabel();
        sizeSelectorPanel = new javax.swing.JPanel();
        sizeXLabel = new javax.swing.JLabel();
        sizeYSelector = new javax.swing.JSpinner();
        sizeYLabel = new javax.swing.JLabel();
        sizeXSelector = new javax.swing.JSpinner();
        mineNumberLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        debugButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        mineNumberSelector = new javax.swing.JSpinner();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(500, 400));
        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Demineur");
        titlePanel.add(jLabel1);

        add(titlePanel, java.awt.BorderLayout.PAGE_START);

        buttonsPanel.setMinimumSize(new java.awt.Dimension(500, 400));
        buttonsPanel.setPreferredSize(new java.awt.Dimension(500, 400));
        java.awt.GridBagLayout buttonsPanelLayout = new java.awt.GridBagLayout();
        buttonsPanelLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        buttonsPanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        buttonsPanel.setLayout(buttonsPanelLayout);

        jPanel1.setMinimumSize(new java.awt.Dimension(72, 23));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        backButton.setText("Retour");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(backButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(filler5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        buttonsPanel.add(jPanel1, gridBagConstraints);

        gamemodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gamemodeLabel.setText("Mode de jeu");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(gamemodeLabel, gridBagConstraints);

        gamemodeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Classique", "Premier coup", "Pure logique" }));
        gamemodeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamemodeSelectorActionPerformed(evt);
            }
        });
        gamemodeSelector.setSelectedItem(App.settings.get("gamemode", "Classique"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(gamemodeSelector, gridBagConstraints);

        displayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        displayLabel.setText("Affichage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(displayLabel, gridBagConstraints);

        displayButton.setText(App.settings.get("displayMode", "Fenetre"));
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(displayButton, gridBagConstraints);

        dificultyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dificultyLabel.setText("Difficulte");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(dificultyLabel, gridBagConstraints);

        dificultySelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Facile", "Moyen", "Difficile", "Personalise" }));
        dificultySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dificultySelectorActionPerformed(evt);
            }
        });
        dificultySelector.setSelectedItem(App.settings.get("difficulty", "Facile"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(dificultySelector, gridBagConstraints);

        sizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sizeLabel.setText("Dimensions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(sizeLabel, gridBagConstraints);

        java.awt.GridBagLayout sizeSelectorPanelLayout = new java.awt.GridBagLayout();
        sizeSelectorPanelLayout.columnWidths = new int[] {0, 5, 0};
        sizeSelectorPanelLayout.rowHeights = new int[] {0, 5, 0};
        sizeSelectorPanel.setLayout(sizeSelectorPanelLayout);

        sizeXLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sizeXLabel.setText("x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.5;
        sizeSelectorPanel.add(sizeXLabel, gridBagConstraints);

        sizeYSelector.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sizeYSelector.setEnabled(App.settings.get("difficulty", "Facile").equals("Personalise"));
        sizeYSelector.setValue(App.settings.getInt("sizeY", 10)
        );
        sizeYSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeYSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 0.5;
        sizeSelectorPanel.add(sizeYSelector, gridBagConstraints);

        sizeYLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sizeYLabel.setText("y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.5;
        sizeSelectorPanel.add(sizeYLabel, gridBagConstraints);

        sizeXSelector.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sizeXSelector.setEnabled(App.settings.get("difficulty", "Facile").equals("Personalise")
        );
        sizeXSelector.setValue(App.settings.getInt("sizeX", 10)
        );
        sizeXSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeXSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 0.5;
        sizeSelectorPanel.add(sizeXSelector, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(sizeSelectorPanel, gridBagConstraints);

        mineNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mineNumberLabel.setText("Nombre de mines");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(mineNumberLabel, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 11)); // NOI18N
        jLabel2.setText("Mode Deboggage");
        jLabel2.setToolTipText("Active le clignotement des cases lorsqu'une mine (bleu) est deplace vers une autre case (rouge) dans le mode pure logique ou premier coup.\n(Pour tester le mode pure logique, une grille etroite et longue [ex: 3x10] maximise le nombre de situations où le deplacement d'une mine est necessaire)");
        jPanel4.add(jLabel2);

        java.awt.GridBagLayout jPanel3Layout = new java.awt.GridBagLayout();
        jPanel3Layout.columnWidths = new int[] {0, 10, 0};
        jPanel3Layout.rowHeights = new int[] {0};
        jPanel3.setLayout(jPanel3Layout);

        debugButton.setText(App.settings.get("debugMode", "Desactive"));
        debugButton.setToolTipText("Active le clignotement des cases lorsqu'une mine (bleu) est deplace vers une autre case (rouge) dans le mode pure logique ou premier coup.\n(Pour tester le mode pure logique, une grille etroite et longue [ex: 3x10] maximise le nombre de situations où le deplacement d'une mine est necessaire)");
        debugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        jPanel3.add(debugButton, gridBagConstraints);

        jLabel3.setText("?");
        jLabel3.setToolTipText("Active le clignotement des cases lorsqu'une mine (bleu) est deplace vers une autre case (rouge) dans le mode pure logique ou premier coup.\n(Pour tester le mode pure logique, une grille etroite et longue [ex: 3x10] maximise le nombre de situations où le deplacement d'une mine est necessaire)");
        jLabel3.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jLabel3, gridBagConstraints);

        jPanel4.add(jPanel3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        mineNumberSelector.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        mineNumberSelector.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mineNumberSelector.setEnabled(App.settings.get("difficulty", "Facile").equals("Personalise"));
        mineNumberSelector.setValue(App.settings.getInt("mines", 15)
        );
        mineNumberSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mineNumberSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        jPanel5.add(mineNumberSelector, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        jPanel5.add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        jPanel5.add(filler8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.2;
        buttonsPanel.add(jPanel5, gridBagConstraints);

        jLabel4.setText("?");
        jLabel4.setToolTipText("Selectionne la difficulte entre facile, moyen, difficile et personalise");
        jLabel4.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        buttonsPanel.add(jLabel4, gridBagConstraints);

        jLabel5.setText("?");
        jLabel5.setToolTipText("Change entre l'affichage plein ecran et fenetre");
        jLabel5.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        buttonsPanel.add(jLabel5, gridBagConstraints);

        jLabel6.setText("?");
        jLabel6.setToolTipText("Classique: Une grille generee totalement au hasard\nPremier coup: Classique mais la premiere case revelee est assure d'etre un 0\nPure logique: Elimine les situations où de la chance est requise pour completer la grille");
        jLabel6.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        buttonsPanel.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        buttonsPanel.add(filler6, gridBagConstraints);

        add(buttonsPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        switch (displayButton.getText()) {
            case "Plein ecran":
                App.settings.put("displayMode", "Fenetre");
                displayButton.setText("Fenetre");
                GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].setFullScreenWindow(null);
                // Add a delay because otherwise the comportement seems unstable
                try {
                    Thread.sleep(250);
                } catch (InterruptedException ex) {
                    Logger.getLogger(SettingsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                App.mainWindow.pack();

                break;

            case "Fenetre":
                App.settings.put("displayMode", "Plein ecran");
                displayButton.setText("Plein ecran");
                GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].setFullScreenWindow(App.mainWindow);
                break;
        }
    }//GEN-LAST:event_displayButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        App.displayMainWindow();
    }//GEN-LAST:event_backButtonActionPerformed

    private void dificultySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dificultySelectorActionPerformed
        String selectedDifficulty = dificultySelector.getSelectedItem().toString();
        if ("Personalise".equals(selectedDifficulty)) {
            sizeXSelector.setEnabled(true);
            sizeYSelector.setEnabled(true);
            mineNumberSelector.setEnabled(true);
            App.settings.put("difficulty", "Personalise");
        } else {
            sizeXSelector.setEnabled(false);
            sizeYSelector.setEnabled(false);
            mineNumberSelector.setEnabled(false);
        }

        switch (selectedDifficulty) {
            //TODO: tweak those values with playtesting
            case "Facile":
                sizeXSelector.setValue(10);
                sizeYSelector.setValue(10);
                mineNumberSelector.setValue(15);

                App.settings.put("sizeX", "10");
                App.settings.put("sizeY", "10");
                App.settings.put("mines", "15");
                App.settings.put("difficulty", "Facile");
                break;
            case "Moyen":
                sizeXSelector.setValue(15);
                sizeYSelector.setValue(12);
                mineNumberSelector.setValue(25);

                App.settings.put("sizeX", "15");
                App.settings.put("sizeY", "12");
                App.settings.put("mines", "25");
                App.settings.put("difficulty", "Moyen");
                break;
            case "Difficile":
                sizeXSelector.setValue(20);
                sizeYSelector.setValue(17);
                mineNumberSelector.setValue(75);

                App.settings.put("sizeX", "20");
                App.settings.put("sizeY", "17");
                App.settings.put("mines", "75");
                App.settings.put("difficulty", "Difficile");
                break;
        }
    }//GEN-LAST:event_dificultySelectorActionPerformed

    private void gamemodeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamemodeSelectorActionPerformed
        App.settings.put("gamemode", gamemodeSelector.getSelectedItem().toString());
    }//GEN-LAST:event_gamemodeSelectorActionPerformed

    private void sizeXSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sizeXSelectorStateChanged
        if (App.settings.get("difficulty", "Facile").equals("Personalise")) {
            App.settings.put("sizeX", sizeXSelector.getValue().toString());
        }
    }//GEN-LAST:event_sizeXSelectorStateChanged

    private void sizeYSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sizeYSelectorStateChanged
        if (App.settings.get("difficulty", "Facile").equals("Personalise")) {
            App.settings.put("sizeY", sizeYSelector.getValue().toString());
        }
    }//GEN-LAST:event_sizeYSelectorStateChanged

    private void mineNumberSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mineNumberSelectorStateChanged
        if ((int) mineNumberSelector.getValue() >= (int) sizeXSelector.getValue() * (int) sizeYSelector.getValue()) {
            mineNumberSelector.setValue((int) sizeXSelector.getValue() * (int) sizeYSelector.getValue() - 1);
        }

        if (App.settings.get("difficulty", "Facile").equals("Personalise")) {
            App.settings.put("mines", mineNumberSelector.getValue().toString());
        }
    }//GEN-LAST:event_mineNumberSelectorStateChanged

    private void debugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugButtonActionPerformed
        if (debugButton.getText().equals("Desactive")) {
            debugButton.setText("Active");
            App.settings.put("debugMode", "Active");
        } else {
            debugButton.setText("Desactive");
            App.settings.put("debugMode", "Desactive");
        }
    }//GEN-LAST:event_debugButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton debugButton;
    private javax.swing.JLabel dificultyLabel;
    private javax.swing.JComboBox<String> dificultySelector;
    private javax.swing.JButton displayButton;
    private javax.swing.JLabel displayLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler8;
    private javax.swing.JLabel gamemodeLabel;
    private javax.swing.JComboBox<String> gamemodeSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel mineNumberLabel;
    private javax.swing.JSpinner mineNumberSelector;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JPanel sizeSelectorPanel;
    private javax.swing.JLabel sizeXLabel;
    private javax.swing.JSpinner sizeXSelector;
    private javax.swing.JLabel sizeYLabel;
    private javax.swing.JSpinner sizeYSelector;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
